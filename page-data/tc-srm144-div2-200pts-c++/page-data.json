{"componentChunkName":"component---src-gatsby-theme-chronoblog-templates-post-js","path":"/tc-srm144-div2-200pts-c++","result":{"data":{"mdx":{"id":"cebe7c40-12d3-5021-aa97-a99205467f07","excerpt":"In this question we are given an integer, seconds. And the question asked us to return it in the  hours:minutes:seconds format. The givenâ€¦","frontmatter":{"category":"TopCoder","author":"CharacterX","title":"TC SRM144 DIV2 200pts C++","date":"2014-03-15T00:00:00.000Z","description":null,"tags":["topcoder","srm","C++","200point"],"cover":null},"fields":{"slug":"/tc-srm144-div2-200pts-c++"},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"TC SRM144 DIV2 200pts C++\",\n  \"slug\": \"TC SRM144 DIV2 200pts C++\",\n  \"date\": \"2014-03-15T00:00:00.000Z\",\n  \"tags\": [\"topcoder\", \"srm\", \"C++\", \"200point\"],\n  \"category\": \"TopCoder\",\n  \"author\": \"CharacterX\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In this question we are given an integer, seconds. And the question asked us to return it in the  hours:minutes:seconds format. The given integer, seconds, is between 0 and 86399.\"), mdx(\"p\", null, \"I defined 3 integers: hour, min, sec. I assigned seconds%60 to sec in order to find the remaining from its devision by 60. That will give me the sec part of the format because everything that can be divisible by 60 will be consumed by minutes and hours. After that i did the same to min and hour. While i was calculating hour, i didn't need to take its module because the input was between 0 and 86399 and it could not pass the value of 24.\"), mdx(\"h2\", {\n    \"id\": \"the-code-is-here\"\n  }, \"The code is here:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cpp\"\n  }, \"#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nclass Time{\\npublic:\\n    string whatTime(int seconds)\\n    {\\n        int sec, hour, min;\\n        sec=seconds%60;\\n        min=(seconds/60)%60;\\n        hour=seconds/3600;\\n        return to_string(hour)+\\\":\\\"+to_string(min)+\\\":\\\"+to_string(sec);\\n    }\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"cebe7c40-12d3-5021-aa97-a99205467f07"}},"staticQueryHashes":["1961101537","2542493696"]}